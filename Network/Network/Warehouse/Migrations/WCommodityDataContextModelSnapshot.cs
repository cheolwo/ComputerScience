// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Warehouse;

namespace Warehouse.Migrations
{
    [DbContext(typeof(WCommodityDataContext))]
    partial class WCommodityDataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.12")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Warehouse.Model.Base", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Country")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Bases");
                });

            modelBuilder.Entity("Warehouse.Model.DividedCommodity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("LoadFrmaeId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("TagfDividing")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("WCommodityId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("LoadFrmaeId");

                    b.HasIndex("WCommodityId");

                    b.ToTable("DividedCommodities");
                });

            modelBuilder.Entity("Warehouse.Model.DividedTag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Attached")
                        .HasColumnType("bit");

                    b.Property<string>("CodeName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("IncomingTagId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IncomingTagId");

                    b.ToTable("DividedTags");
                });

            modelBuilder.Entity("Warehouse.Model.ImageofBase", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("BaseId")
                        .HasColumnType("int");

                    b.Property<string>("ImageRoute")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageTitle")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BaseId");

                    b.ToTable("ImagesofBase");
                });

            modelBuilder.Entity("Warehouse.Model.ImageofDelivering", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("OutgoingCommodityId")
                        .HasColumnType("int");

                    b.Property<string>("Route")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("OutgoingCommodityId");

                    b.ToTable("ImagesofDelivering");
                });

            modelBuilder.Entity("Warehouse.Model.ImageofIncoming", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Route")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("WCommodityId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("WCommodityId");

                    b.ToTable("ImagesofIncoming");
                });

            modelBuilder.Entity("Warehouse.Model.ImageofLoading", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DividedCommodityId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Route")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DividedCommodityId");

                    b.ToTable("ImagesofLoading");
                });

            modelBuilder.Entity("Warehouse.Model.ImageofOutgoing", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("OutgoingCommodityId")
                        .HasColumnType("int");

                    b.Property<string>("Route")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("OutgoingCommodityId");

                    b.ToTable("ImagesofOutgoing");
                });

            modelBuilder.Entity("Warehouse.Model.ImageofPack", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ImageRoute")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageTitie")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PackId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PackId");

                    b.ToTable("ImagesofPack");
                });

            modelBuilder.Entity("Warehouse.Model.ImageofPacking", b =>
                {
                    b.Property<int>("ImageNo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("DateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("OutgoingCommodityId")
                        .HasColumnType("int");

                    b.Property<string>("Route")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ImageNo");

                    b.HasIndex("OutgoingCommodityId");

                    b.ToTable("ImageofPacking");
                });

            modelBuilder.Entity("Warehouse.Model.ImageofWCommodity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Route")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("WCommodityId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("WCommodityId");

                    b.ToTable("ImagesofWCommodity");
                });

            modelBuilder.Entity("Warehouse.Model.IncomingTag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Attached")
                        .HasColumnType("bit");

                    b.Property<string>("CodeName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("IncomingTags");
                });

            modelBuilder.Entity("Warehouse.Model.LoadFrame", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("BaseId")
                        .HasColumnType("int");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BaseId");

                    b.ToTable("LoadFrames");
                });

            modelBuilder.Entity("Warehouse.Model.OutgoingCommodity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("DeliveringTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeliveringUser")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("OutgoingTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("OutgoingUser")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PackId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("PackingTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("PackingUser")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("PickingTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("PickingUser")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("StateofOutgoing")
                        .HasColumnType("int");

                    b.Property<int?>("WCommodityId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("WaitingTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("PackId");

                    b.HasIndex("WCommodityId");

                    b.ToTable("OutgoingCommodities");
                });

            modelBuilder.Entity("Warehouse.Model.Pack", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Material")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Width")
                        .HasColumnType("float");

                    b.Property<double>("height")
                        .HasColumnType("float");

                    b.Property<double>("length")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.ToTable("Packs");
                });

            modelBuilder.Entity("Warehouse.Model.WCommodity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Barcode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("BaseId")
                        .HasColumnType("int");

                    b.Property<int>("IncomingQuantity")
                        .HasColumnType("int");

                    b.Property<string>("IncomingTag")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("IncomingTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("IncomingUser")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("InspectingTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("InspectingUser")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LoadingTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OutgoingQuantity")
                        .HasColumnType("int");

                    b.Property<string>("Purpose")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StateofIncoming")
                        .HasColumnType("int");

                    b.Property<int>("TCommodityId")
                        .HasColumnType("int");

                    b.Property<double?>("Width")
                        .HasColumnType("float");

                    b.Property<double?>("height")
                        .HasColumnType("float");

                    b.Property<double?>("length")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("BaseId");

                    b.ToTable("WCommodities");
                });

            modelBuilder.Entity("Warehouse.Model.DividedCommodity", b =>
                {
                    b.HasOne("Warehouse.Model.LoadFrame", "LoadFrmae")
                        .WithMany("DividedCommodities")
                        .HasForeignKey("LoadFrmaeId");

                    b.HasOne("Warehouse.Model.WCommodity", "WCommodity")
                        .WithMany("DividedCommodities")
                        .HasForeignKey("WCommodityId");
                });

            modelBuilder.Entity("Warehouse.Model.DividedTag", b =>
                {
                    b.HasOne("Warehouse.Model.IncomingTag", "IncomingTag")
                        .WithMany("DividedTags")
                        .HasForeignKey("IncomingTagId");
                });

            modelBuilder.Entity("Warehouse.Model.ImageofBase", b =>
                {
                    b.HasOne("Warehouse.Model.Base", "Base")
                        .WithMany("ImagesofBase")
                        .HasForeignKey("BaseId");
                });

            modelBuilder.Entity("Warehouse.Model.ImageofDelivering", b =>
                {
                    b.HasOne("Warehouse.Model.OutgoingCommodity", "OutgoingCommodity")
                        .WithMany("ImagesofDelivering")
                        .HasForeignKey("OutgoingCommodityId");
                });

            modelBuilder.Entity("Warehouse.Model.ImageofIncoming", b =>
                {
                    b.HasOne("Warehouse.Model.WCommodity", "WCommodity")
                        .WithMany("ImagesofIncoming")
                        .HasForeignKey("WCommodityId");
                });

            modelBuilder.Entity("Warehouse.Model.ImageofLoading", b =>
                {
                    b.HasOne("Warehouse.Model.DividedCommodity", "DividedCommodity")
                        .WithMany("ImagesofLoading")
                        .HasForeignKey("DividedCommodityId");
                });

            modelBuilder.Entity("Warehouse.Model.ImageofOutgoing", b =>
                {
                    b.HasOne("Warehouse.Model.OutgoingCommodity", "OutgoingCommodity")
                        .WithMany("ImagesofOutgoing")
                        .HasForeignKey("OutgoingCommodityId");
                });

            modelBuilder.Entity("Warehouse.Model.ImageofPack", b =>
                {
                    b.HasOne("Warehouse.Model.Pack", null)
                        .WithMany("ImagesofPack")
                        .HasForeignKey("PackId");
                });

            modelBuilder.Entity("Warehouse.Model.ImageofPacking", b =>
                {
                    b.HasOne("Warehouse.Model.OutgoingCommodity", "OutgoingCommodity")
                        .WithMany("ImagesofPacking")
                        .HasForeignKey("OutgoingCommodityId");
                });

            modelBuilder.Entity("Warehouse.Model.ImageofWCommodity", b =>
                {
                    b.HasOne("Warehouse.Model.WCommodity", "WCommodity")
                        .WithMany("ImagesofWCommodity")
                        .HasForeignKey("WCommodityId");
                });

            modelBuilder.Entity("Warehouse.Model.LoadFrame", b =>
                {
                    b.HasOne("Warehouse.Model.Base", null)
                        .WithMany("LoadFrmaes")
                        .HasForeignKey("BaseId");
                });

            modelBuilder.Entity("Warehouse.Model.OutgoingCommodity", b =>
                {
                    b.HasOne("Warehouse.Model.Pack", "Pack")
                        .WithMany()
                        .HasForeignKey("PackId");

                    b.HasOne("Warehouse.Model.WCommodity", "WCommodity")
                        .WithMany("OutgoingCommodities")
                        .HasForeignKey("WCommodityId");
                });

            modelBuilder.Entity("Warehouse.Model.WCommodity", b =>
                {
                    b.HasOne("Warehouse.Model.Base", "Base")
                        .WithMany("WCommodities")
                        .HasForeignKey("BaseId");
                });
#pragma warning restore 612, 618
        }
    }
}
